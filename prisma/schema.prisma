// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String  @unique
  password      String?
  token         String?
  username      String?
  firstname     String?
  lastname      String?
  photo         String?
  bio           String?
  online        Boolean @default(false)
  goalsscored   Int     @default(0)
  goalsconceded Int     @default(0)

  chats ChatRoom[]

  messages Message[]
  friends      User[] @relation("Friends")
  friendOf     User[] @relation("Friends")

  blockedUsers User[] @relation("BlockedUsers")
  blockedBy    User[] @relation("BlockedUsers")

  outgoingFriendRequests FriendRequest[] @relation("OutgoingFriendRequests")
  incomingFriendRequests FriendRequest[] @relation("IncomingFriendRequests")

}



model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isAdmin Boolean @default(false)
  name    String?
  public  Boolean @default(true)

  password String?
  members  User[]
  messages Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation(fields: [senderId], references: [id])
  senderId Int

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int

  content String?
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation("OutgoingFriendRequests", fields: [senderId], references: [id])
  senderId Int

  receiver   User @relation("IncomingFriendRequests", fields: [receiverId], references: [id])
  receiverId Int
}
